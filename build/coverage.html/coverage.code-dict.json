{"/home/travis/build/npmtest/node-npmtest-xml2json/test.js":"/* istanbul instrument in package npmtest_xml2json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xml2json/lib.npmtest_xml2json.js":"/* istanbul instrument in package npmtest_xml2json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xml2json = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xml2json = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xml2json/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xml2json && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xml2json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xml2json\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xml2json.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_xml2json.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xml2json.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_xml2json.__dirname + '/lib.npmtest_xml2json.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xml2json/node_modules/xml2json/index.js":"module.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-xml2json/node_modules/xml2json/lib/index.js":"var exports = module.exports;\n\nexports.toJson = require('./xml2json');\nexports.toXml = require('./json2xml');\n","/home/travis/build/npmtest/node-npmtest-xml2json/node_modules/xml2json/lib/xml2json.js":"var expat = require('node-expat');\nvar sanitizer = require('./sanitize.js')\nvar joi = require('joi');\nvar hoek = require('hoek');\n\n// This object will hold the final result.\nvar obj = {};\nvar currentObject = {};\nvar ancestors = [];\nvar currentElementName = null;\n\nvar options = {}; //configuration options\nfunction startElement(name, attrs) {\n    currentElementName = name;\n    if(options.coerce) {\n        // Looping here in stead of making coerce generic as object walk is unnecessary\n        for(var key in attrs) {\n            attrs[key] = coerce(attrs[key],key);\n        }\n    }\n\n    if (! (name in currentObject)) {\n        if(options.arrayNotation || options.forceArrays[name]) {\n            currentObject[name] = [attrs];\n        } else {\n            currentObject[name] = attrs;\n        }\n    } else if (! (currentObject[name] instanceof Array)) {\n        // Put the existing object in an array.\n        var newArray = [currentObject[name]];\n        // Add the new object to the array.\n        newArray.push(attrs);\n        // Point to the new array.\n        currentObject[name] = newArray;\n    } else {\n        // An array already exists, push the attributes on to it.\n        currentObject[name].push(attrs);\n    }\n\n    // Store the current (old) parent.\n    ancestors.push(currentObject);\n\n    // We are now working with this object, so it becomes the current parent.\n    if (currentObject[name] instanceof Array) {\n        // If it is an array, get the last element of the array.\n        currentObject = currentObject[name][currentObject[name].length - 1];\n    } else {\n        // Otherwise, use the object itself.\n        currentObject = currentObject[name];\n    }\n}\n\nfunction text(data) {\n    currentObject[textNodeName()] = (currentObject[textNodeName()] || '') + data;\n}\n\nfunction endElement(name) {\n    if (currentObject[textNodeName()]) {\n        if (options.trim) {\n            currentObject[textNodeName()] = currentObject[textNodeName()].trim()\n        }\n\n        if (options.sanitize) {\n            currentObject[textNodeName()] = sanitizer.sanitize(currentObject[textNodeName()], true);\n        }\n\n        currentObject[textNodeName()] = coerce(currentObject[textNodeName()],name);\n    }\n\n    if (currentElementName !== name) {\n        delete currentObject[textNodeName()];\n    }\n    // This should check to make sure that the name we're ending\n    // matches the name we started on.\n    var ancestor = ancestors.pop();\n    if (!options.reversible) {\n        if ((textNodeName() in currentObject) && (Object.keys(currentObject).length == 1)) {\n            if (ancestor[name] instanceof Array) {\n                ancestor[name].push(ancestor[name].pop()[textNodeName()]);\n            } else {\n                ancestor[name] = currentObject[textNodeName()];\n            }\n        }\n    }\n\n    currentObject = ancestor;\n}\n\nfunction coerce(value,key) {\n    if (!options.coerce || value.trim() === '') {\n        return value;\n    }\n\n    if (typeof options.coerce[key] === 'function')\n        return options.coerce[key](value);\n\n    var num = Number(value);\n    if (!isNaN(num)) {\n        return num;\n    }\n\n    var _value = value.toLowerCase();\n\n    if (_value == 'true') {\n        return true;\n    }\n\n    if (_value == 'false') {\n        return false;\n    }\n\n    return value;\n}\n\nfunction textNodeName() {\n    return options.alternateTextNode ? typeof options.alternateTextNode === 'string' ? options.alternateTextNode : '_t' : '$t'\n}\n\n\n/**\n * Parses xml to json using node-expat.\n * @param {String|Buffer} xml The xml to be parsed to json.\n * @param {Object} _options An object with options provided by the user.\n * The available options are:\n *  - object: If true, the parser returns a Javascript object instead of\n *            a JSON string.\n *  - reversible: If true, the parser generates a reversible JSON, mainly\n *                characterized by the presence of the property $t.\n *  - sanitize_values: If true, the parser escapes any element value in the xml\n * that has any of the following characters: <, >, (, ), #, #, &, \", '.\n *  - alternateTextNode (boolean OR string): \n *      If false or not specified: default of $t is used \n *      If true, whenever $t is returned as an end point, is is substituted with _t  \n *      it String, whenever $t is returned as an end point, is is substituted with the String value (care advised)\n *\n * @return {String|Object} A String or an Object with the JSON representation\n * of the XML.\n */\nmodule.exports = function(xml, _options) {\n\n    _options = _options || {};\n    var parser = new expat.Parser('UTF-8');\n\n    parser.on('startElement', startElement);\n    parser.on('text', text);\n    parser.on('endElement', endElement);\n\n    obj = currentObject = {};\n    ancestors = [];\n    currentElementName = null;\n\n    var schema = {\n        object: joi.boolean().default(false),\n        reversible: joi.boolean().default(false),\n        coerce: joi.alternatives([joi.boolean(), joi.object()]).default(false),\n        sanitize: joi.boolean().default(true),\n        trim: joi.boolean().default(true),\n        arrayNotation: joi.alternatives([joi.boolean(), joi.array()]).default(false),\n        alternateTextNode: [joi.boolean().default(false), joi.string().default(false)]\n    };\n    var validation = joi.validate(_options, schema);\n    hoek.assert(validation.error === null, validation.error);\n    options = validation.value;\n    options.forceArrays = {};\n    if (Array.isArray(options.arrayNotation)) {\n        options.arrayNotation.forEach(function(i) {\n            options.forceArrays[i] = true;\n        });\n        options.arrayNotation = false;\n    }\n    if (!parser.parse(xml)) {\n        throw new Error('There are errors in your xml file: ' + parser.getError());\n    }\n\n    if (options.object) {\n        return obj;\n    }\n\n    var json = JSON.stringify(obj);\n\n    //See: http://timelessrepo.com/json-isnt-a-javascript-subset\n    json = json.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n    \n    return json;\n};\n","/home/travis/build/npmtest/node-npmtest-xml2json/node_modules/xml2json/lib/sanitize.js":"/**\n * Simple sanitization. It is not intended to sanitize\n * malicious element values.\n *\n * character | escaped\n *      <       &lt;\n *      >       &gt;\n *      (       &#40;\n *      )       &#41;\n *      #       &#35;\n *      &       &amp;\n *      \"       &quot;\n *      '       &apos;\n */\nvar chars = {\n    '&': '&amp;',\n    '#': '&#35;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '(': '&#40;',\n    ')': '&#41;',\n    '\"': '&quot;',\n    \"'\": '&apos;'\n};\n\nfunction escapeRegExp(string) {\n    return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n\nexports.sanitize = function sanitize(value, reverse) {\n    if (typeof value !== 'string') {\n        return value;\n    }\n\n    Object.keys(chars).forEach(function(key) {\n        if (reverse) {\n            value = value.replace(new RegExp(escapeRegExp(chars[key]), 'g'), key);\n        } else {\n            value = value.replace(new RegExp(escapeRegExp(key), 'g'), chars[key]);\n        }\n    });\n\n    return value;\n}\n","/home/travis/build/npmtest/node-npmtest-xml2json/node_modules/xml2json/lib/json2xml.js":"var sanitizer = require('./sanitize.js')\n\nmodule.exports = function (json, options) {\n    if (json instanceof Buffer) {\n        json = json.toString();\n    }\n\n    var obj = null;\n    if (typeof(json) == 'string') {\n        try {\n            obj = JSON.parse(json);\n        } catch(e) {\n            throw new Error(\"The JSON structure is invalid\");\n        }\n    } else {\n        obj = json;\n    }\n    var toXml = new ToXml(options);\n    toXml.parse(obj);\n    return toXml.xml;\n}\n\nToXml.prototype.parse = function(obj) {\n    var self = this;\n    var keys = Object.keys(obj);\n    var len = keys.length;\n\n    // First pass, extract strings only\n    for (var i = 0; i < len; i++) {\n        var key = keys[i], value = obj[key], isArray = Array.isArray(value);\n        var type = typeof(value);\n        if (type == 'string' || type == 'number' || type == 'boolean' || isArray) {\n            var it = isArray ? value : [value];\n\n            it.forEach(function(subVal) {\n                if (typeof(subVal) != 'object') {\n                    if (key == '$t') {\n                        self.addTextContent(subVal);\n                    } else {\n                        self.addAttr(key, subVal);\n                    }\n                }\n            });\n        }\n    }\n\n    // Second path, now handle sub-objects and arrays\n    for (var i = 0; i < len; i++) {\n        var key = keys[i];\n\n        if (Array.isArray(obj[key])) {\n            var elems = obj[key];\n            var l = elems.length;\n            for (var j = 0; j < l; j++) {\n                var elem = elems[j];\n\n                if (typeof(elem) == 'object') {\n                    self.openTag(key);\n                    self.parse(elem);\n                    self.closeTag(key);\n                }\n            }\n        } else if (typeof(obj[key]) == 'object') {\n            self.openTag(key);\n            self.parse(obj[key]);\n            self.closeTag(key);\n        }\n    }\n\n};\n\nToXml.prototype.openTag = function(key) {\n    this.completeTag();\n    this.xml += '<' + key;\n    this.tagIncomplete = true;\n}\nToXml.prototype.addAttr = function(key, val) {\n    if (this.options.sanitize) {\n        val = sanitizer.sanitize(val)\n    }\n    this.xml += ' ' + key + '=\"' + val + '\"';\n}\nToXml.prototype.addTextContent = function(text) {\n    this.completeTag();\n    this.xml += text;\n}\nToXml.prototype.closeTag = function(key) {\n    this.completeTag();\n    this.xml += '</' + key + '>';\n}\nToXml.prototype.completeTag = function() {\n    if (this.tagIncomplete) {\n        this.xml += '>';\n        this.tagIncomplete = false;\n    }\n}\nfunction ToXml(options) {\n    var defaultOpts = {\n        sanitize: false\n    };\n\n    if (options) {\n        for (var opt in options) {\n            defaultOpts[opt] = options[opt];\n        }\n    }\n\n    this.options = defaultOpts;\n    this.xml = '';\n    this.tagIncomplete = false;\n}\n","/home/travis/build/npmtest/node-npmtest-xml2json/node_modules/xml2json/t.js":"var parser = require('./index');\n\n// xml to json\nvar xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> \\\n<results options=\\\"123456789\\\" start=\\\"1\\\" end=\\\"6\\\" total=\\\"6\\\"> \\\n    <result> \\\n        <area>Area</area> \\\n        <score>27</score> \\\n        <description>DEscription</description> \\\n    </result> \\\n</results>\";\nconsole.log(\"input -> %s\", xml)\nvar json = parser.toJson(xml);\nconsole.log(\"to json -> %s\", json);\n\nvar xml = parser.toXml(json);\nconsole.log(\"back to xml -> %s\", xml)\n"}